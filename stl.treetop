grammar STL
  
  # hook for the top level
  rule stl
    solid
  end

  # solid
  # the facet label forces a facet method to be generated even when the facet is missing and not matched
  rule solid
    s solid_start newline facet:facet* solid_end newline? {
      def name
        solid_start.solid_name.text_value
      end
      
      def facets
        facet.elements
      end
    }
  end
  
  rule solid_start
    "solid" S solid_name
  end
  
  rule solid_name
    [a-zA-Z0-9]*
  end
  
  rule solid_end
    "endsolid" S solid_name
  end
  
  # facets
  rule facet
    facet_start newline outer_loop:outer_loop? facet_end newline {
      def normal
        [facet_start.ni.value, facet_start.nj.value, facet_start.nk.value]
      end

      def vertices
        outer_loop.vertex.elements
      end
    }
  end
  
  rule facet_start
    "facet normal" S ni:number s nj:number s nk:number
  end
  
  rule facet_end
    "endfacet"
  end

  # outer loop
  rule outer_loop
    outer_loop_start newline vertex:vertex* outer_loop_end newline
  end
  
  rule outer_loop_start
    "outer loop"
  end
  
  rule outer_loop_end
    "endloop"
  end
  
  # vertex
  rule vertex
    "vertex" S vx:number s vy:number s vz:number newline {
      def value
        [vx.value, vy.value, vz.value]
      end
    }
  end
  
  rule number
    "-"? [0-9]+ "." [0-9]+ {
      def value
        text_value.to_f
      end
    }
  end
  
  rule s
    [ \t]*
  end
  
  rule S
    [ \t]+
  end
  
  rule newline
    s "\n"+ s
  end
end